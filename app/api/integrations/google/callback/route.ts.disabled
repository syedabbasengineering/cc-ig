import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/src/lib/db/client';
import { googleDocsService } from '@/src/lib/integrations/google-docs';

/**
 * Handles Google OAuth callback
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const code = searchParams.get('code');
    const state = searchParams.get('state');
    const error = searchParams.get('error');

    if (error) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/settings?error=google_auth_denied`
      );
    }

    if (!code || !state) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/settings?error=google_auth_invalid`
      );
    }

    // Extract workspace ID from state
    const [workspaceId] = state.split(':');

    // Verify state matches
    const workspace = await prisma.workspace.findUnique({
      where: { id: workspaceId },
      select: { settings: true },
    });

    const storedState = (workspace?.settings as any)?.googleOAuthState;
    if (storedState !== state) {
      return NextResponse.redirect(
        `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/settings?error=google_auth_invalid_state`
      );
    }

    // Exchange code for tokens
    const tokens = await googleDocsService.exchangeCode(code);

    // Store tokens in workspace settings (encrypted in production!)
    await prisma.workspace.update({
      where: { id: workspaceId },
      data: {
        settings: {
          ...((await prisma.workspace.findUnique({
            where: { id: workspaceId },
            select: { settings: true },
          }))?.settings as any),
          googleIntegration: {
            accessToken: tokens.access_token,
            refreshToken: tokens.refresh_token,
            expiryDate: tokens.expiry_date,
            scope: tokens.scope,
            tokenType: tokens.token_type,
            installedAt: new Date().toISOString(),
          },
          googleOAuthState: null, // Clear state
        } as any,
      },
    });

    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/settings?success=google_connected`
    );
  } catch (error) {
    console.error('Google OAuth callback error:', error);
    return NextResponse.redirect(
      `${process.env.NEXT_PUBLIC_APP_URL}/dashboard/settings?error=google_auth_error`
    );
  }
}
